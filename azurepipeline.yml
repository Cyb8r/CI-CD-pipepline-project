trigger: 
- main

pool: NEW_POOL

variables:
  KUBECONFIG: 'home/dev-test/kubeconfig.txt' # Specify the correct path to your kubeconfig file
  dockerRegistryServiceConnection: 'ACR_MSI' # Correcting registry variable name
  imageRepository: 'myapplicationdeployments.azurecr.io/newmavenapp'
  dockerFilePath: '$(Build.SourcesDirectory)/Dockerfile'
  tag: '$(Build.BuildId)'

stages:
- stage: BuildJar
  displayName: 'Build Jar'
  jobs: 
  - job: BuildJar
    steps: 
    - task: Maven@4
      inputs:
        azureSubscription: 'MSDN Platforms Subscription(8d350286-edf6-4a53-b8f7-cfcc76ef61e1)'
        mavenPomFile: 'pom.xml'
        publishJUnitResults: true
        testResultsFiles: '**/surefire-reports/TEST-*.xml'
        javaHomeOption: 'JDKVersion'
        mavenVersionOption: 'Default'
        mavenAuthenticateFeed: false
        effectivePomSkip: false
        sonarQubeRunAnalysis: false

- stage: BuildImage
  displayName: 'Build Image'
  jobs:
    - job: BuildImage
      steps:
        - task: DockerInstaller@0
          inputs:
            dockerVersion: '17.09.0-ce'
        - task: Docker@2
          displayName: Build Docker Image 
          inputs: 
           command: buildAndPush
           containerRegistry: $(dockerRegistryServiceConnection)
           Dockerfile: $(dockerFilePath) # Correct casing of dockerFilePath variable
           repository: $(imageRepository)
           tags: |
             $(tag) 

- stage: InstallTrivy
  displayName: 'Install Trivy'
  dependsOn: BuildImage
  jobs:
    - job: 
      steps:
        - script: |
              echo Installing Trivy
              curl -sfL https://raw.githubusercontent.com/aquasecurity/trivy/main/contrib/install.sh | sh -s -- -b $HOME/bin
              echo Trivy Installed
          displayName: Install Trivy

- stage: ScanDockerImage
  displayName: 'Scan Docker Image with Trivy'
  dependsOn: 
  - InstallTrivy
  - BuildImage # Ensure image is built before scanning
  condition: succeeded('BuildImage')
  jobs: 
    - job: ScanDockerImage
      steps:
        - script: |
              echo Scanning Docker Image
              imageName=$(imageRepository):$(tag)
              $HOME/bin/trivy image --exit-code 1 --severity HIGH,CRITICAL $imageName
          displayName: Scanned Image

#- stage: PushToACR
  #displayName: 'Push to Azure Container Registry'
  #dependsOn: 
  #- InstallTrivy
  #- ScanDockerImage
  #- BuildImage
  #condition: succeeded('BuildImage')
  #jobs:
    #- job: PushToACR # Corrected job name
      #steps:
        #- task: Docker@2
          #displayName: Push Image to ACR
          #inputs:
            #command: push
            #containerRegistry: $(dockerRegistryServiceConnection) # Corrected registry reference
            #repository: $(imageRepository) # Include repository
            #tags: |
              #$(tag) # Include the tag for pushing
